{"version":3,"sources":["zebra.src.js"],"names":["$","selector","parent","first_only","this","indexOf","document","createElement","innerHTML","firstChild","get","match","getElementById","substr","querySelector","e","Array","prototype","slice","call","querySelectorAll","Element","Document","Window","$this","elements","concat","addClass","class_name","i","j","split","classList","add","ajax","append","element","insertAdjacentHTML","appendChild","attr","attribute","value","setAttribute","undefined","getAttribute","removeAttribute","css","property","computedStyle","style","window","getComputedStyle","data","each","callback","first","hasClass","contains","height","parseFloat","html","content","insertAfter","insertBefore","mq","off","offset","getBoundingClientRect","top","pageYOffset","documentElement","clientTop","left","pageXOffset","clientLeft","on","event_name","addEventListener","outerHeight","include_margins","computed_style","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","marginTop","marginBottom","outerWidth","computed_styles","width","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","marginLeft","marginRight","position","offsetLeft","offsetTop","ready","readyState","remove","removeClass","scrollLeft","scrollTop","serialize","text","textContent","toggleClass","trigger","unwrap","val","wrap"],"mappings":"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","file":"zebra.min.js","sourcesContent":["/**\n *\n *  @fileOverview\n *  @name       ZebraJS\n *  @author     Stefan Gabos <contact@stefangabos.ro>\n *  @version    0.0.1 (last revision: October 17th, 2016)\n *  @copyright  (c) 2016 Stefan Gabos\n *  @license    LGPL-3.0\n */\n\n/**\n *  Creates a \"$\" object which provides methods meant for simplifying the interaction with the set of elements matched\n *  by the `selector` argument. This is refered to as `wrapping` those elements.\n *\n *  @param  {string|object|node}    selector\n *  @class\n */\n$ = function(selector, parent, first_only) {\n\n    'use strict';\n\n    // if called without the \"new\" keyword\n    if (!(this instanceof $)) {\n\n        // if selector is given as a string\n        if (typeof selector === 'string') {\n\n            // if we called the method to *create* an HTML node\n            if (selector.indexOf('<') === 0) {\n\n                // create a dummy container\n                parent = document.createElement('div');\n\n                // set its body to the string\n                parent.innerHTML = selector;\n\n                // create and return an $ object\n                return new $(parent.firstChild);\n\n            }\n\n            // if parent is not given, consider \"document\" to be the parent\n            if (!parent) parent = document;\n\n            // if parent is set but is a \"$\" object, refer to the DOM elements instead of the \"$\" object\n            else if (parent instanceof $) parent = parent.get()[0];\n\n            // if the selector is an ID\n            // select the matching element and create and return a new \"$\" object\n            if (selector.match(/^\\#[^\\s]+$/)) return new $(parent.getElementById(selector.substr(1)));\n\n            // if the \"first_only\" argument is set\n            else if (first_only)\n\n                // try\n                try {\n\n                    // select the matching element and create and return a new \"$\" object\n                    return new $(parent.querySelector(selector));\n\n                // if something went wrong (not a valid CSS selector)\n                } catch (e) {\n\n                    // return false\n                    return false;\n\n                }\n\n            // otherwise\n            try {\n\n                // select the matching elements and create and return a new \"$\" object\n                return new $(Array.prototype.slice.call(parent.querySelectorAll(selector)));\n\n            // if something went wrong (not a valid CSS selector)\n            } catch (e) {\n\n                // return false\n                return false;\n\n            }\n\n        // if selector is a DOM node, the Document or Window object, wrap it and return the new \"$\" object\n        } else if (typeof selector === 'object' && (selector instanceof Element || selector instanceof Document || selector instanceof Window)) return new $(selector);\n\n        // if we're calling $() on an \"$\" object, simply return the original object\n        else if (selector instanceof $) return selector;\n\n        // bogus selector, return false\n        return false;\n\n    // if called with the \"new\" keyword\n    } else {    // eslint-disable-line no-else-return\n\n        // if no elements found, return now\n        if (!selector) return;\n\n        // private properties\n        // reference to the \"$\" object\n        var $this = this,\n\n            // the set of matched elements\n            elements = (selector instanceof Element ? [selector] : [].concat(selector));\n\n        /**\n         *  @todo   Needs documentation!\n         *\n         *  @access public\n         */\n        this.get = function() {\n            return elements;\n        }\n\n        /**\n         *  Adds one or more classes to each element in the set of matched elements.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.add}\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // add a single class\n         *  elements.addClass('some-class');\n         *\n         *  // add multiple classes\n         *  elements.addClass('some-class some-other-class');\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.addClass('some-class some-other-class').css('display', 'none');\n\n         *  @param  {string}    class_name  One or more space-separated class names to be added to each element in the\n         *                                  set of matched elements.\n         *\n         *  @todo               This method currently doesn't work on IE9\n         *\n         *  @return {$}         Returns the set of matched elements, for chaining.\n         */\n        this.addClass = function(class_name) {\n\n            var i, j;\n\n            // split by space and create an array\n            class_name = class_name.split(' ');\n\n            // iterate through the set of matched elements\n            for (i in elements)\n\n                // iterate through the class names to add\n                for (j in class_name)\n\n                    // add class\n                    elements[i].classList.add(class_name[j]);\n\n            // return the set of matched elements, for chaining\n            return $this;\n\n        };\n\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.ajax = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.append = function(element) {\n\n            var i, j;\n\n            // if element to append is an $ object, we'll use the array of DOM elements\n            if (element instanceof $) element = element.get();\n\n            // if element to append is a DOM node, wrap it in an array\n            else if (element instanceof Element) element = [element];\n\n            // if element to append is not a string, don't go further\n            else if (typeof element !== 'string') return false;\n\n            // iterate through the set of matched elements\n            for (i in elements)\n\n                // if element to append is actually a string\n                if (typeof element === 'string')\n\n                    // add it like this\n                    elements[i].insertAdjacentHTML('beforeend', element);\n\n                // since element has to be an array of DOM elements\n                // iterate over the array of DOM elements\n                else for (j in element)\n\n                    // append each node to the parent\n                    elements[i].appendChild(element[j]);\n\n        }\n\n        /**\n         *  Gets the value of an attribute for the first element in the set of matched elements, or sets one or more attributes\n         *  for every matched element.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute setAttribute},\n         *  > {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute getAttribute} and\n         *  > {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute removeAttribute}.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // get the value of an attribute for the first\n         *  // element in the set of matched elements\n         *  elements.attr('id');\n         *\n         *  // set a single attribute\n         *  elements.attr('title', 'title');\n         *\n         *  // set multiple attributes\n         *  elements.attr({\n         *      title: 'title',\n         *      href: 'href'\n         *  });\n         *\n         *  // remove an attribute\n         *  elements.attr('title', false);\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.attr('title', 'title').removeClass('classname');\n         *\n         *  @param  {string|object} attribute   If given as a `string` representing an attribute and `value` **is not** set, this\n         *                                      method will return that particular attribute's value for the first element in the\n         *                                      set of matched elements.\n         *                                      <br><br>\n         *                                      If given as a `string` representing an attribute and `value` **is** set, this\n         *                                      method will set that particular attribute's value for all the elements in the\n         *                                      set of matched elements.\n         *                                      <br><br>\n         *                                      If given as an `object`, this method will set the given attributes to the given\n         *                                      values for all the elements in the set of matched elements.\n         *\n         *  @param  {string}        [value]     The value to be set for the attribute given as argument. *Only used if `attribute`\n         *                                      is not an object!*\n         *                                      <br><br>\n         *                                      Setting it to `false` or `null` will instead **remove** the attribute from the\n         *                                      set of matched elements.\n         *\n         *  @return {$|mixed}   When `setting` attributes, this method returns the set of matched elements, for chaining.\n         *                      When `reading` attributes, this method returns the value of the required attribute.\n         */\n        this.attr = function(attribute, value) {\n\n            var i, j;\n\n            // if attribute argument is an object\n            if (typeof attribute === 'object')\n\n                // iterate over the set of matched elements\n                for (i in elements)\n\n                    // iterate over the attributes\n                    for (j in attribute)\n\n                        // set each attribute\n                        elements[i].setAttribute(j, attribute[j]);\n\n            // if attribute argument is a string\n            else if (typeof attribute === 'string')\n\n                // if the value argument is provided\n                if (undefined !== value)\n\n                    // iterate over the set of matched elements\n                    for (i in elements)\n\n                        // if value argument's value is FALSE or NULL\n                        if (value === false || value === null)\n\n                            // remove the attribute\n                            elements[i].removeAttribute(attribute);\n\n                        // for other values, set the attribute's property\n                        else elements[i].setAttribute(attribute, value);\n\n                // if the value argument is not provided\n                else\n\n                    // return the value of the requested attribute\n                    // of the first element in the set of matched elements\n                    return elements[0].getAttribute(attribute);\n\n            // if we get this far, return the set of matched elements, for chaining\n            return elements;\n\n        }\n\n        /**\n         *  Gets the value of a computed style property for the first element in the set of matched elements, or sets one or more\n         *  CSS properties for every matched element.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // get the value of a computed style property\n         *  // for the first element in the set of matched elements\n         *  elements.css('width');\n         *\n         *  // set a single CSS property\n         *  elements.css('position', 'absolute');\n         *\n         *  // set multiple CSS properties\n         *  elements.css({\n         *      position: 'absolute',\n         *      left: 0,\n         *      top: 0\n         *  });\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.css('position', 'absolute').removeClass('classname');\n         *\n         *  @param  {string|object} property    If given as a `string` representing a CSS property and `value` **is not** set,\n         *                                      this method will return the computed style of that particular property for the\n         *                                      first element in the set of matched elements.\n         *                                      <br><br>\n         *                                      If given as a `string` representing a CSS property and `value` **is** set, this\n         *                                      method will set that particular CSS property's value for all the elements in the\n         *                                      set of matched elements.\n         *                                      <br><br>\n         *                                      If given as an `object`, this method will set the given CSS properties to the\n         *                                      given values for all the elements in the set of matched elements.\n         *                                      <br><br>\n         *                                      When reading CSS properties, this method acts as a wrapper for\n         *                                      {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle window.getComputedStyle}\n         *\n         *  @return {$|mixed}   When `setting` CSS properties, this method returns the set of matched elements, for chaining.\n         *                      When `reading` CSS properties, this method returns the value(s) of the required computed style(s).\n         */\n        this.css = function(property, value) {\n\n            var i, j, computedStyle;\n\n            // if \"property\" is an object and \"value\" is not set\n            if (typeof property === 'object')\n\n                // iterate through the set of matched elements\n                for (i in elements)\n\n                    // iterate through the \"properties\" object\n                    for (j in property)\n\n                        // set each style property\n                        elements[i].style[j] = property[j];\n\n            // if \"property\" is not an object, and \"value\" argument is set\n            else if (value)\n\n                // iterate through the set of matched elements\n                for (i in elements)\n\n                    // set the respective style property\n                    elements[i].style[property] = value;\n\n            // if \"property\" is not an object and \"value\" is not set\n            // return the value of the given CSS property, or \"undefined\" if property is not available\n            else {\n\n                // get the first element's computed styles\n                computedStyle = window.getComputedStyle(elements[0]);\n\n                // return the sought property's value\n                return computedStyle[property];\n\n            }\n\n            // if we get this far, return the matched elements, for chaining\n            return $this;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.data = function() {\n\n        }\n\n        /**\n         *  Iterates over the set of matched elements, executing a callback function for each element in the set.\n         *\n         *  @param  {function}  callback    The function to execute for each item in the set. The callback function\n         *                                  receives as single argument the element's position in the set, called `index`\n         *                                  (0-based). The `this` keyword inside the callback function refers to the\n         *                                  wrapped element (in a \"$\" object) the callback function is currently applied\n         *                                  to.\n         *                                  <br><br>\n         *                                  *Use {@link $#_dom _dom()} to refer to the DOM node instead.*\n         *                                  <br><br>\n         *                                  *Returning `FALSE` from the callback function breaks the loop!*\n         *\n         *  @example\n         *\n         *  $('selector').each(function(index) {\n         *\n         *      // show the element's index in the set\n         *      console.log(index);\n         *\n         *      // remember, the \"this\" keyword refers\n         *      // to the wrapped element (in a \"$\" object)\n         *      this.css('display', 'none');\n         *\n         *      // the original DOM node\n         *      console.log(this._dom());\n         *\n         *  });\n         */\n        this.each = function(callback) {\n\n            // iterate through the set of matched elements\n            for (var i in elements)\n\n                //  apply the callback function (the index is the argument to the function, while the \"this\" keyword\n                //  inside the callback function refers to wrapped element (in a \"$\" object)\n                //  returning false from the callback function exists the loop\n                if (callback.call(new $(elements[i]), i) === false) return;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.first = function() {\n\n        }\n\n        /**\n         *  Checks whether *any* of the matched elements have the given class.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.contains}\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // check if matched elements have a certain class\n         *  var class_exists = elements.hasClass('some-class');\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.toggleClass('some-class');\n         *\n         *  @param  {string}    class_name  The name of a class to be checked if it exists on *any* of the elements in the set\n         *                                  of matched elements.\n         *\n         *  @todo               This method currently doesn't work on IE9\n         *\n         *  @return {boolean}   Returns TRUE if the sought class exists in *any* of the elements in the set of matched elements.\n         */\n        this.hasClass = function(class_name) {\n\n            // iterate through the set of matched elements\n            for (var i in elements)\n\n                // if sought class exists, return TRUE\n                if (elements[i].classList.contains(class_name)) return true;\n\n            // return FALSE if we get this far\n            return false;\n\n        }\n\n        /**\n         *  Returns the current computed **inner** height (without `padding`, `border` and `margin`) of the first element\n         *  in the set of matched elements as `float`, or sets the `height` CSS property of every element in the set.\n         *\n         *  > When retrieving the height, this method uses the {@link $#css .css} method (which use JavaScript's\n         *  {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle window.getComputedStyle}), and uses\n         *  JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style style} when setting the height\n         *  of elements.\n         *\n         *  See {@link $#outerHeight .outerHeight()} for getting the height including `padding`, `border` and, optionally,\n         *  `margin`.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // returns the current computed inner height of the first element in the set of matched elements\n         *  elements.height();\n         *\n         *  // sets the \"height\" CSS property of all elements in the set to 200px\n         *  elements.height(200);\n         *  elements.height('200');\n         *  elements.height('200px');\n         *\n         *  // sets the \"height\" CSS property of all elements in the set to 5em\n         *  elements.height('5em');\n         *\n         *  // when setting the height, you can use chaining\n         *  elements.height(200).addClass('some-class');\n         *\n         *  @param  {undefined|number|string}   [height]    If not given, the method will return the computed **inner**\n         *                                                  height (without `padding`, `border` and `margin`) for the first\n         *                                                  element in the set of matched elements.\n         *                                                  <br><br>\n         *                                                  If given, the method will set the `height` CSS property of all\n         *                                                  the elements in the set to that particular value, making sure\n         *                                                  to apply the \"px\" suffix if not otherwise specified.\n         *\n         *  > For hidden elements the returned value is `0`!\n         *\n         *  @return {$|float}   When **setting** the `height`, this method returns the set of matched elements, for chaining.\n         *                      Otherwise, it returns the current computed **inner** height (without `padding`, `border` and\n         *                      `margin`) of the first element in the set of matched elements, as `float`.\n         */\n        this.height = function(height) {\n\n            // if \"height\" is given, set the height of every matched element, making sure to suffix the value with \"px\"\n            // if not otherwise specified\n            if (height) return this.css('height', height + (parseFloat(height) === height ? 'px' : ''));\n\n            // if \"height\" is not given, return the height of the first element in the set\n            // or 0 if that yields NaN\n            return parseFloat(window.getComputedStyle(elements[0], null).height) || 0;\n\n        }\n\n        /**\n         *  Gets the HTML content of the first element in the set of matched elements, or set the HTML content of every matched\n         *  element.\n         *\n         *  > This method is a wrapper for JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML innerHTML}\n         *\n         *  > There are some {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations security considerations}\n         *  that you should be aware of when using this method.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // set the HTML content for all the matched elements\n         *  elements.html('<p>Hello</p>');\n         *\n         *  // get the HTML content of the first\n         *  // element in the set of matched elements\n         *  var content = elements.html();\n         *\n         *  // since this method returns the set of matched elements,\n         *  // we can use chaining\n         *  elements.html('<p>Hello</p>').addClass('some-class');\n\n         *  @param  {string}    [content]   The HTML content to set as the content of all the matched elements. Note that any\n         *                                  content that was previously in that element is completely replaced by the new\n         *                                  content.\n         *\n         *  @return {$|string}              When the `content` argument is provided, this method returns the set of matched elements,\n         *                                  for chaining. Otherwise it returns the HTML content of the first element in the set\n         *                                  of matched elements.\n         */\n        this.html = function(content) {\n\n            var i;\n\n            // if content is provided\n            if (content)\n\n                // iterate through the set of matched elements\n                for (i in elements)\n\n                    // set the HTML content of each element\n                    elements[i].innerHTML = content;\n\n            // if content is not provided\n            // return the content of the first element in the set of matched elements\n            else return elements[0].innerHTML;\n\n            // return the set of matched elements, for chaining\n            return $this;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.insertAfter = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.insertBefore = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.mq = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.off = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.offset = function() {\n\n            var i = elements[0].getBoundingClientRect();\n\n            return {\n                top: i.top + window.pageYOffset - document.documentElement.clientTop,\n                left: i.left + window.pageXOffset - document.documentElement.clientLeft\n            }\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.on = function(event_name, callback) {\n\n            for (var i in elements)\n                elements[i].addEventListener(event_name, callback.call(this));\n\n        }\n\n        /**\n         *  Returns the current computed height for the first element in the set of matched elements, including `padding`,\n         *  `border` and, optionally, `margin`.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle window.getComputedStyle}.\n         *\n         *  > For hidden elements the returned value is `0`!\n         *\n         *  See {@link $#height .height()} for getting the **inner** height without `padding`, `border` and `margin`.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var element = $('selector');\n         *\n         *  // get the element's outer height\n         *  var height = element.outerHeight();\n         *\n         *  @param  {boolean}   [include_margins]   If set to `TRUE`, the result will also include **top** and **bottom**\n         *                                          margins.\n         *\n         *  @return {float}\n         */\n        this.outerHeight = function(include_margins) {\n\n            // get the values of all the CSS properties of the element\n            // after applying the active stylesheets and resolving any\n            // basic computation those values may contain\n            var computed_style = window.getComputedStyle(elements[0]);\n\n            // return the result of inner height together with\n            return (parseFloat(computed_style.height) +\n\n                // top and bottom paddings\n                parseFloat(computed_style.paddingTop) + parseFloat(computed_style.paddingBottom) +\n\n                // top and bottom borders\n                parseFloat(computed_style.borderTopWidth) + parseFloat(computed_style.borderBottomWidth) +\n\n                // include margins, if requested\n                (include_margins ? parseFloat(computed_style.marginTop) + parseFloat(computed_style.marginBottom) : 0)) || 0;\n\n        }\n\n        /**\n         *  Returns the current computed width for the first element in the set of matched elements, including `padding`,\n         *  `border` and, optionally, `margin`.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle window.getComputedStyle}.\n         *\n         *  > For hidden elements the returned value is `0`!\n         *\n         *  See {@link $#width .width()} for getting the **inner** width without `padding`, `border` and `margin`.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var element = $('selector');\n         *\n         *  // get the element's outer width\n         *  var height = element.outerWidth();\n         *\n         *  @param  {boolean}   [include_margins]   If set to `TRUE`, the result will also include **left** and **right**\n         *                                          margins.\n         *\n         *  @return {float}\n         */\n        this.outerWidth = function(include_margins) {\n\n            // get the values of all the CSS properties of the element\n            // after applying the active stylesheets and resolving any\n            // basic computation those values may contain\n            var computed_styles = window.getComputedStyle(elements[0]);\n\n            // return the result of inner width together with\n            return (parseFloat(computed_styles.width) +\n\n                // left and right paddings\n                parseFloat(computed_styles.paddingLeft) + parseFloat(computed_styles.paddingRight) +\n\n                // left and right borders\n                parseFloat(computed_styles.borderLeftWidth) + parseFloat(computed_styles.borderRightWidth) +\n\n                // include margins, if requested\n                (include_margins ? parseFloat(computed_styles.marginLeft) + parseFloat(computed_styles.marginRight) : 0)) || 0;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.parent = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.position = function() {\n\n            return {\n                left: parseFloat(elements[0].offsetLeft),\n                top: parseFloat(elements[0].offsetTop)\n            }\n\n        }\n\n        /**\n         *  @todo   Needs documentation!\n         */\n        this.ready = function(callback) {\n\n            if (document.readyState === 'complete' || document.readyState !== 'loading') callback();\n\n            else document.addEventListener('DOMContentLoaded', callback);\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.remove = function() {\n\n        }\n\n        /**\n         *  Removes one or more classes from each element in the set of matched elements.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.remove}\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // remove a single class\n         *  elements.removeClass('some-class');\n         *\n         *  // remove multiple classes\n         *  elements.removeClass('some-class some-other-class');\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.removeClass('some-class some-other-class').css('display', 'none');\n         *\n         *  @param  {string}    class_name  One or more space-separated class names to be removed from each element in\n         *                                  the set of matched elements.\n         *\n         *  @todo               This method currently doesn't work on IE9\n         *\n         *  @return {$}         Returns the set of matched elements, for chaining.\n         */\n        this.removeClass = function(class_name) {\n\n            var i, j;\n\n            // split by space and create an array\n            class_name = class_name.split(' ');\n\n            // iterate through the set of matched elements\n            for (i in elements)\n\n                // iterate through the class names to remove\n                for (j in class_name)\n\n                    // remove class\n                    elements[i].classList.remove(class_name[j]);\n\n            // return the set of matched elements, for chaining\n            return $this;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.scrollLeft = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.scrollTop = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.serialize = function() {\n\n        }\n\n        /**\n         *  Gets the text content of the first element in the set of matched elements (combined with the text content of all its\n         *  descendants), or sets the text contents of the matched elements.\n         *\n         *  > This method is a wrapper for JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent textContent}\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // set the text content for all the matched elements\n         *  elements.text('Hello');\n         *\n         *  // get the text content of the first element in the\n         *  // set of matched elements (including its descendants)\n         *  var content = elements.text();\n         *\n         *  // since this method returns the set of matched elements,\n         *  // we can use chaining\n         *  elements.text('Hello').addClass('some-class');\n\n         *  @param  {string}    [content]   The text to set as the content of all the matched elements. Note that any text\n         *                                  content that was previously in that element is completely replaced by the new\n         *                                  content.\n         *\n         *  @return {$|string}              When the `content` argument is provided, this method returns the set of matched elements,\n         *                                  for chaining. Otherwise it returns the text content of the first element in the set\n         *                                  of matched elements (combined with the text content of all its descendants)\n         */\n        this.text = function(content) {\n\n            var i;\n\n            // if content is provided\n            if (content)\n\n                // iterate through the set of matched elements\n                for (i in elements)\n\n                    // set the text content of each element\n                    elements[i].textContent = content;\n\n            // if content is not provided\n            // return the text content of the first element in the set of matched elements\n            // (combined with the text content of all its descendants)\n            else return elements[0].textContent;\n\n            // return the set of matched elements, for chaining\n            return $this;\n\n        }\n\n        /**\n         *  Adds or removes one or more classes from each element in the set of matched elements, depending on the presence of\n         *  each class name given as argument.\n         *\n         *  > This method uses JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.contains},\n         *  > {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.add} and\n         *  > {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList classList.remove}.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // set a random class\n         *  elements.addClass('some-class');\n         *\n         *  // toggle classes\n         *  // the result will be that \"some-class\" will be removed from the matched elements while the \"other-class\" will be added\n         *  elements.toggleClass('some-class other-class');\n         *\n         *  // since this method returns the set of matched elements, we can use chaining\n         *  elements.toggleClass('some-class').css('display', 'none');\n         *\n         *  @param  {string}    class_name  One or more space-separated class names to be toggled for each element in the set of\n         *                                  matched elements.\n         *\n         *  @todo               This method currently doesn't work on IE9\n         *\n         *  @return {$}         Returns the set of matched elements, for chaining.\n         */\n        this.toggleClass = function(class_name) {\n\n            var i, j;\n\n            // split by space and create an array\n            class_name = class_name.split(' ');\n\n            // iterate through the set of matched elements\n            for (i in elements)\n\n                // iterate through the class names to remove\n                for (j in class_name)\n\n                    // if class is present, remove it\n                    if (elements[i].classList.contains(class_name[j])) elements[i].classList.remove(class_name[j]);\n\n                    // if class is not present, add it\n                    else elements[i].classList.add(class_name[j]);\n\n            // return the set of matched elements, for chaining\n            return $this;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.trigger = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.unwrap = function() {\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.val = function() {\n\n        }\n\n        /**\n         *  Returns the current computed **inner** width (without `padding`, `border` and `margin`) of the first element\n         *  in the set of matched elements as `float`, or sets the `width` CSS property of every element in the set.\n         *\n         *  > When retrieving the width, this method uses the {@link $#css .css} method (which use JavaScript's\n         *  {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle window.getComputedStyle}), and uses\n         *  JavaScript's {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style style} when setting the width\n         *  of elements.\n         *\n         *  See {@link $#outerWidth .outerWidth()} for getting the width including `padding`, `border` and, optionally,\n         *  `margin`.\n         *\n         *  @example\n         *\n         *  // always cache selectors\n         *  // to avoid DOM scanning over and over again\n         *  var elements = $('selector');\n         *\n         *  // returns the current computed inner width of the first element in the set of matched elements\n         *  elements.width();\n         *\n         *  // sets the \"width\" CSS property of all elements in the set to 200px\n         *  elements.width(200);\n         *  elements.width('200');\n         *  elements.width('200px');\n         *\n         *  // sets the \"width\" CSS property of all elements in the set to 5em\n         *  elements.width('5em');\n         *\n         *  // when setting the width, you can use chaining\n         *  elements.width(200).addClass('some-class');\n         *\n         *  @param  {undefined|number|string}   [width]     If not given, this method will return the computed **inner**\n         *                                                  width (without `padding`, `border` and `margin`) of the first\n         *                                                  element in the set of matched elements.\n         *                                                  <br><br>\n         *                                                  If given, this method will set the `width` CSS property of all\n         *                                                  the elements in the set to that particular value, making sure\n         *                                                  to apply the \"px\" suffix if not otherwise specified.\n         *\n         *  > For hidden elements the returned value is `0`!\n         *\n         *  @return {$|float}   When **setting** the `width`, this method returns the set of matched elements, for chaining.\n         *                      Otherwise, it returns the current computed **inner** width (without `padding`, `border` and\n         *                      `margin`) of the first element in the set of matched elements, as `float`.\n         */\n        this.width = function(width) {\n\n            // if \"width\" is given, set the width of every matched element, making sure to suffix the value with \"px\"\n            // if not otherwise specified\n            if (width) return this.css('width', width + (parseFloat(width) === width ? 'px' : ''));\n\n            // if \"width\" is not given, return the width of the first element in the set\n            // or 0 if that yields NaN\n            return parseFloat(window.getComputedStyle(elements[0], null).width) || 0;\n\n        }\n\n        /**\n         *  @todo   Needs to be written!\n         */\n        this.wrap = function() {\n\n        }\n\n\n    }\n\n}\n"]}
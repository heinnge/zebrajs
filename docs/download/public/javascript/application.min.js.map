{"version":3,"sources":["../../assets_src/javascript/application.js"],"names":["$","document","ready","modules","block","i","template","html","trim","global_object","modules_container","total_download_size_container","downloadable_content","extract_methods","matches","method_name","source","source_length","length","tmp","matching_brackets","methods","match","substr","parse_template","variables","content","replace","RegExp","manage_modules","code","global_object_name","val","each","id","this","getAttribute","checked","method","size","appendTo","attr","readonly","disabled","on","e","preventDefault"],"mappings":"AAAAA,EAAEC,UAAUC,MAAM,WAEd,GAiFIC,GAASC,EAAOC,EA9EhBC,EAAWN,EAAE,mBAAmBO,OAAOC,OAGvCC,EAAgBT,EAAE,WAClBU,EAAoBV,EAAE,8BACtBW,EAAgCX,EAAE,uBAClCY,EAAuBZ,EAAE,YAGzBa,EAAkB,WAEd,GAEIR,GAAaS,EAAoCC,EAFjDC,EAAS,0CACTC,EAAgBD,EAAOE,OACpBC,EAAM,GAAaC,GAAoB,EAAoBC,IAGlE,KAAKhB,EAAI,EAAGA,EAAIY,EAAeZ,IAG3Bc,GAAOH,EAAOX,GAGVe,KAAsB,IAAUN,EAAUK,EAAIG,MAAM,2CAGpDH,EAAM,GACNC,EAAoB,GAGbA,KAAsB,GAAuB,MAAdJ,EAAOX,GAAYe,IAGpDA,KAAsB,GAAuB,MAAdJ,EAAOX,IAAYe,IAGjC,IAAtBA,GAAmC,KAARD,IAG3BJ,EAAcD,EAAQ,GAAGQ,MAAM,kBAAkB,GAG7B,QAAhBP,EAAuBM,EAAQN,IAAgBC,EAAOO,OAAO,EAAGlB,GAAK,QAAQG,OAG5Ea,EAAQN,GAAeD,EAAQ,GAAKK,EAAM,IAG/CA,EAAM,GACNC,GAAoB,EAO5B,OAAOC,IAKXG,EAAiB,SAASC,GAEtB,GAAwBpB,GAApBqB,EAAUpB,CAGd,KAAKD,IAAKoB,GAGNC,EAAUA,EAAQC,QAAQ,GAAIC,QAAO,KAAOvB,EAAI,KAAM,KAAMoB,EAAUpB,GAG1E,OAAOqB,IAKXL,EAAUR,IAIVgB,EAAiB,WAEb,GAAIC,GAAO,GAAIC,EAAqBtB,EAAcuB,MAAMxB,MAGxDL,GAAQ8B,KAAK,WAGT,GAAIC,GAAKC,KAAKC,aAAa,MAAMT,QAAQ,WAAY,GAGjDQ,MAAKE,UAGLP,GAAQT,EAAe,MAAPa,EAAa,MAAQA,MAKlB,KAAvBH,EAGAnB,EAAqBoB,IAAIF,EAAKH,QAAQ,SAAUI,EAAqB,KAAKJ,QAAQ,UAAWI,EAAqB,KAAKJ,QAAQ,iBAAkB,eAAiBI,IAGjKnB,EAAqBoB,IAAIF,GAG9BnB,EAA8BJ,KAAKK,EAAqBoB,MAAMd,QAKtE,KAAKb,IAAKgB,GAGI,QAANhB,EAGAD,EAAQJ,EAAEwB,GACNc,OAAQjB,EAAQhB,GAAGiB,MAAM,kBAAkB,GAC3CiB,KAAMlB,EAAQhB,GAAGa,UAGjBsB,SAAS9B,IAMbN,EAAQJ,EAAE,QAASA,EAAEwB,GACjBc,OAAQ,IACRC,KAAMlB,EAAQhB,GAAGa,OAAS,MAGzBsB,SAASxC,EAAE,sBAGhBA,EAAE,QAASI,GAAOqC,MACdJ,QAAS,UACTK,SAAU,WACVC,SAAU,aAMtBxC,GAAUH,EAAE,eAGZA,EAAE,SAAS4C,GAAG,SAAU,QAASf,GAGjCpB,EAAcmC,GAAG,OAAQf,GAGzB7B,EAAE,gBAAgB4C,GAAG,QAAS,SAASC,GAEnCA,EAAEC,iBAGF3C,EAAQ8B,KAAK,WAGuB,aAA5BE,KAAKC,aAAa,QAAsBD,KAAKE,SAAU,KAK/DR,MAKJ7B,EAAE,kBAAkB4C,GAAG,QAAS,SAASC,GAErCA,EAAEC,iBAGF3C,EAAQ8B,KAAK,WAGuB,aAA5BE,KAAKC,aAAa,QAAsBD,KAAKE,SAAU,KAK/DR,MAKJA","file":"application.min.js","sourcesContent":["$(document).ready(function() {\n\n    var\n\n        // the template for the modules blocks\n        template = $('script#template').html().trim(),\n\n        // cache some selectors\n        global_object = $('#object'),\n        modules_container = $('#packager .row:first-child'),\n        total_download_size_container = $('.result strong span'),\n        downloadable_content = $('textarea'),\n\n        // extract all the available methods\n        extract_methods = function() {\n\n            var source = '@import \"../../../../dist/zebra.min.js\"',\n                source_length = source.length,\n                i, tmp = '', matches, matching_brackets = false, method_name, methods = {};\n\n            // go over the source code, character by character\n            for (i = 0; i < source_length; i++) {\n\n                // concatenate characters\n                tmp += source[i];\n\n                // if we're not looking for a matching closing bracket and we found a method\n                if (matching_brackets === false && (matches = tmp.match(/this\\.([^\\(]+?)=function\\([^\\)]*?\\)\\{/))) {\n\n                    // we start looking for the matching closing bracket\n                    tmp = '';\n                    matching_brackets = 1;\n\n                // if we were looking for matching brackets and we found an opening bracket\n                } else if (matching_brackets !== false && source[i] === '{') matching_brackets++;\n\n                // if we were looking for matching brackets and we found an closing bracket\n                else if (matching_brackets !== false && source[i] === '}') matching_brackets--;\n\n                // if we found a method\n                if (matching_brackets === 0 && tmp !== '') {\n\n                    // this is the method's name\n                    method_name = matches[0].match(/^this\\.(.*?)\\=/)[1];\n\n                    // add the global function this way\n                    if (method_name === 'get') methods[method_name] = (source.substr(0, i) + '}}};').trim();\n\n                    // add the methods\n                    else methods[method_name] = matches[0] + tmp + ';';\n\n                    // start looking for other methods\n                    tmp = '';\n                    matching_brackets = false;\n\n                }\n\n            }\n\n            // return the array of methods\n            return methods;\n\n        },\n\n        // parses the modules template and replaces placeholders with actual values\n        parse_template = function(variables) {\n\n            var content = template, i;\n\n            // iterate over the variables object given as argument\n            for (i in variables)\n\n                // replace placeholders with values\n                content = content.replace(new RegExp('{{' + i + '}}', 'g'), variables[i]);\n\n            // return HTML ready to be inserted into the DOM\n            return content;\n\n        },\n\n        // get an object with the existing methods\n        methods = extract_methods(),\n\n        modules, block, i,\n\n        manage_modules = function() {\n\n            var code = '', global_object_name = global_object.val().trim();\n\n            // iterate over the existing modules\n            modules.each(function() {\n\n                // the ID of the current module\n                var id = this.getAttribute('id').replace(/method\\_/, '');\n\n                // if checkbox is checked\n                if (this.checked)\n\n                    // add module's source to the existing source code\n                    code += methods[id === '$' ? 'get' : id];\n\n            });\n\n            // if we have a global object name\n            if (global_object_name !== '')\n\n                // replace instances of \"$\" in the source code (with those of the given name)\n                downloadable_content.val(code.replace(/\\B\\$=/g, global_object_name + '=').replace(/\\B\\$\\(/g, global_object_name + '(').replace(/instanceof \\$/g, 'instance of ' + global_object_name));\n\n            // otherwise simply set the downloadable content\n            else downloadable_content.val(code);\n\n            // update the total downloadable size\n            total_download_size_container.html(downloadable_content.val().length);\n\n        };\n\n    // iterate over the available methods\n    for (i in methods)\n\n        // if this is not the global object\n        if (i !== 'get')\n\n            // generate the HTML for the module, based on the template\n            block = $(parse_template({\n                method: methods[i].match(/^this\\.(.*?)\\=/)[1],\n                size: methods[i].length\n\n            // ...and add it to the section of optional modules\n            })).appendTo(modules_container);\n\n        // if this is the global object\n        else {\n\n            // generate the HTML, based on the template\n            block = $('.well', $(parse_template({\n                method: '$',\n                size: methods[i].length + 3\n\n            // ...and add it to the section of required modules\n            }))).appendTo($('.required-modules'));\n\n            // additionally, disable the checkbox\n            $('input', block).attr({\n                checked: 'checked',\n                readonly: 'readonly',\n                disabled: 'disabled'\n            });\n\n        }\n\n    // now that all modules were added cache them\n    modules = $('.well input');\n\n    // toggling a checkbox, means generating the source code and updating the downloadable size\n    $('.well').on('change', 'input', manage_modules);\n\n    // update source code when global object's name is changed\n    global_object.on('blur', manage_modules);\n\n    // select all\n    $('a.select-all').on('click', function(e) {\n\n        e.preventDefault();\n\n        // iterate over all available modules\n        modules.each(function() {\n\n            // check each module, unless this is the global object\n            if (this.getAttribute('id') !== 'method_$') this.checked = true;\n\n        });\n\n        // generate source code\n        manage_modules();\n\n    });\n\n    // deselect all\n    $('a.deselect-all').on('click', function(e) {\n\n        e.preventDefault();\n\n        // iterate over all available modules\n        modules.each(function() {\n\n            // uncheck each module, unless this is the global object\n            if (this.getAttribute('id') !== 'method_$') this.checked = false;\n\n        });\n\n        // generate source code\n        manage_modules();\n\n    });\n\n    // generate initial source code\n    manage_modules();\n\n});\n"]}